// Generated by CoffeeScript 1.10.0
var allDomainsRange, domains, lastSearches, listURL, logSearch, search, searchboxChanged, updateList;

listURL = 'https://raw.githubusercontent.com/pirate/sites-using-cloudflare/master/sorted_unique_cf.txt';

String.prototype.matchAllWithIndexes = function(match) {
  var exact, i, indexes, j, k, ref, toMatch;
  toMatch = [];
  if (Array.isArray(match) || typeof match === 'string') {
    toMatch = match;
  } else {
    throw new TypeError("Expected Array or String, got '" + (typeof match) + "'");
  }
  if (toMatch.length > this.length) {
    return {
      matches: false
    };
  }
  exact = true;
  indexes = [];
  j = 0;
  for (i = k = 0, ref = this.length; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
    if (this[i] === toMatch[j]) {
      indexes.push(i);
      if (++j === toMatch.length) {
        return {
          matches: true,
          exact: exact,
          indexes: indexes
        };
      }
    } else if (j > 0) {
      exact = false;
    }
  }
  return {
    matches: false
  };
};

domains = [];

allDomainsRange = [];

$(document).ready(function() {
  if (navigator.userAgent.match(/iPhone|iPad|iPod/i)) {
    $('main').addClass('hidden');
    $('#not-supported').removeClass('hidden');
    return;
  }
  $('#searchbox').on('keyup change paste', searchboxChanged);
  console.log('Loading domains...');
  return $.ajax({
    type: 'GET',
    url: listURL,
    data: {},
    progress: function(e) {
      var percentComplete;
      if (e.lengthComputable) {
        percentComplete = e.loaded / e.total;
        return console.log(percentComplete);
      }
    },
    success: function(data) {
      var k, ref, results1;
      domains = data.split('\n');
      allDomainsRange = (function() {
        results1 = [];
        for (var k = 0, ref = domains.length; 0 <= ref ? k < ref : k > ref; 0 <= ref ? k++ : k--){ results1.push(k); }
        return results1;
      }).apply(this);
      return console.log('Done');
    }
  });
});

lastSearches = [
  {
    query: '',
    results: {
      exact: [],
      partial: [],
      all: []
    }
  }
];

searchboxChanged = function(evnt) {
  return search($(this).val())["catch"](function(e) {
    return console.log(e);
  }).then(function(r) {
    return updateList(r);
  });
};

search = function(query) {
  return new Promise(function(resolve, reject) {
    var i, k, l, lastSearch, len, len1, match, results, searchScope, si;
    lastSearch = lastSearches[0];
    if (query === '') {
      results = {
        exact: [],
        partial: [],
        all: [],
        noQuery: true
      };
      logSearch(query, results);
      resolve(results);
      return;
    }
    searchScope = [];
    if (lastSearch.query !== '' && query.startsWith(lastSearch.query)) {
      searchScope = lastSearch.results.all;
    } else {
      for (i = k = 0, len = lastSearches.length; k < len; i = ++k) {
        si = lastSearches[i];
        if (si.query === query) {
          results = si.results;
          lastSearches.unshift((lastSearches.splice(i, 1))[0]);
          resolve(results);
          return;
        }
      }
      searchScope = allDomainsRange;
    }
    results = {
      exact: [],
      partial: [],
      all: [],
      noQuery: false
    };
    for (l = 0, len1 = searchScope.length; l < len1; l++) {
      i = searchScope[l];
      match = domains[i].matchAllWithIndexes(query);
      if (!match.matches) {
        continue;
      }
      results.all.push(i);
      if (match.exact) {
        results.exact.push({
          domain: i,
          start: match.indexes[0],
          end: match.indexes[match.indexes.length - 1]
        });
      } else {
        results.partial.push({
          domain: i,
          indexes: match.indexes
        });
      }
    }
    logSearch(query, results);
    resolve(results);
  });
};

logSearch = function(query, results) {
  lastSearches.unshift({
    query: query,
    results: results
  });
  if (lastSearches.length > 50) {
    return lastSearches.splice(50);
  }
};

updateList = function(results) {
  var domain, e, eremain, exactCount, exacts, i, k, l, p, partialCount, partials, premain, ref, ref1;
  exactCount = results.exact.length;
  if (exactCount > 5) {
    eremain = exactCount - 5;
    exactCount = 5;
  }
  partialCount = results.partial.length;
  if (partialCount > 5) {
    premain = partialCount - 5;
    partialCount = 5;
  }
  $('#results').toggleClass('hidden', exactCount + partialCount === 0);
  $('#results .section.exact').toggleClass('hidden', exactCount === 0);
  $('#results  .section.partial').toggleClass('hidden', partialCount === 0);
  $('#no-results').toggleClass('hidden', (exactCount + partialCount > 0) || results.noQuery);
  if (exactCount + partialCount === 0) {
    return;
  }
  exacts = '';
  for (i = k = 0, ref = exactCount; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
    e = results.exact[i];
    domain = domains[e.domain];
    exacts += "<li><span class=\"http\">http://</span><span class=\"main\">" + domain + "</span></li>";
  }
  partials = '';
  for (i = l = 0, ref1 = partialCount; 0 <= ref1 ? l < ref1 : l > ref1; i = 0 <= ref1 ? ++l : --l) {
    p = results.partial[i];
    domain = domains[p.domain];
    partials += "<li><span class=\"http\">http://</span><span class=\"main\">" + domain + "</span></li>";
  }
  $('#results .section.exact .items').empty().append(exacts);
  return $('#results .section.partial .items').empty().append(partials);
};

//# sourceMappingURL=main.js.map
